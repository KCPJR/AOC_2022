Function D15{
    [CmdletBinding(DefaultParameterSetName = 'A')]
    Param(
        [Parameter(ParameterSetName = "A")]
        [Switch] $A,

        # Parameter help description
        [Parameter(ParameterSetName = "B")]
        [Switch]
        $B
    )
    Begin{

        switch ($PsCmdlet.ParameterSetName) {
            A {
                Write-host "ParameterSet A"
                $data = Get-Content .\Day_15\Input_test.txt
                $targetline = 10
            }
            B {
                Write-host "ParameterSet B"
                $data = Get-Content .\Day_15\Input.txt
                $targetline = 2000000
            }
            Default {}
        }

        $sensors = @()
        foreach($line in $data){
            #Write-Verbose ("{0}" -f $line)
            #$line = $data[0]
            #write-verbose ("{0}" -f $line)
            $tar = $line.split("=")
            $sx = $tar[1].substring(0,$tar[1].indexof(","))
            $sy = $tar[2].substring(0,$tar[2].indexof(":"))
            $bx = $tar[3].substring(0,$tar[3].indexof(","))
            $by = $tar[4]
            $scoord = ("{0},{1}" -f $sx,$sy)
            $bcoord = ("{0},{1}" -f $bx,$by)
            $d = Get-Distance -coordA $scoord -coordB $bcoord
            #Write-Verbose ("({0},{1}) to ({2},{3}) D = {4}" -f $sx,$sy,$bx,$by,$d)
            #Write-Verbose ("{0} to {1} D: {2}" -f $scoord,$bcoord,$d)
            $Sensors += [PSCustomObject]@{
                coord = $scoord
                beacon = $bcoord
                X = $sx
                Y = $sy
                D = $d
            }
            
        }
        
        #$sensors
        $index = 0
        $set = @()
        foreach($sensor in $sensors){
            #$sensor = $sensors[0]
            $intersectioncoord = ("{0},{1}" -f $sensor.X,$targetline)
            $dtoline = Get-Distance -coordA $sensor.coord -coordB $intersectioncoord
            $isinreach = $sensor.D -ge $dtoline
            if($isinreach){$rangeonline = $sensor.d - $dtoline}else{$rangeonline = ""}

            Write-Verbose ("[Sensor {0}] ({1}) Range:{2}" -f $index,$sensor.coord,$sensor.D)
            write-verbose ("  Dist to target line: {0} Sensor Reach: {1}" -f $dtoline,$sensor.D)
            write-verbose ("    -Taret line is in range of sensor {0}" -f $isinreach)
            
            if($isinreach){
                $startx = ([int]$sensor.x - [int]$rangeonline)
                $finishx = ([int]$sensor.x + [int]$rangeonline)
                Write-Verbose ("     - Range on the target line: {0}" -f $rangeonline)
                write-verbose ("        {0} - {1} = {2}" -f $sensor.x, $rangeonline, $startx)
                write-verbose ("        {0} + {1} = {2}" -f $sensor.x, $rangeonline, $finishx)
                Write-Verbose ("        {0} to {1}" -f $startx,$finishx)
                ($startx)..($finishx)|%{$set += ("{0},{1}" -f $_,$targetline)}
            }
            #if($isinreach){(-$rangeonline + $sensor.x)..($sensor.x + $rangeonline)}


            $index++
        }
        #remove any beacons on the target line.
        foreach($sensor in $sensors){
            if($sensor.beacon.split(",")[1] -eq $targetline){$set = $set|?{$_ -ne $sensor.beacon}}
        }

        $solutionPartOne = $set |select -Unique
        Write-host ("Solution Part One: {0}" -f $solutionPartOne.count)
        #$solutionPartOne
    }
}

function Get-Distance {
    [cmdletbinding()]
    param(
        $coordA,
        $coordB
    )
    Begin{
        $Ax = $coordA.split(",")[0]
        $Ay = $coordA.split(",")[1]
        $Bx = $coordB.split(",")[0]
        $By = $coordB.split(",")[1]

        $dx = [math]::abs($Ax - $Bx)
        $dy = [math]::abs($Ay - $By)
        $d = $dx + $dy
        $d


    }
}

function Merge-Ranges {
    [cmdletbinding()]
    param(
        $A,
        $B
        )
    Begin{
        $results = @()
        [int]$Astart = [int]$A.split(",")[0]
        [int]$Afinish = [int]$A.split(",")[1]
        [int]$Bstart = [int]$B.split(",")[0]
        [int]$Bfinish = [int]$B.split(",")[1]

        if($astart -gt $bstart){
            #swap A and B
            $ts = [int]$Astart; $tf = [int]$Afinish
            $Astart = [int]$Bstart; [int]$Afinish = $Bfinish
            [int]$Bstart = $ts; [int]$Bfinish = $tf
        }

        Write-Verbose ("A: {0} to {1}" -f $Astart, $Afinish)
        Write-Verbose ("B: {0} to {1}" -f $Bstart, $Bfinish)
        Write-Verbose ("")

        if($Bstart -gt $Afinish){
            write-verbose("{0}"-f ($Afinish + 1))
            if(($Afinish + 1) -eq $Bstart){
                #Adjacent
                Write-verbose ("Discrete Adjacent")
                $results += ("{0},{1}" -f $Astart,$Bfinish)
            }
            else{
                #not adjacent
                Write-verbose ("Discrete")
                $results += ("{0},{1}" -f $Astart,$Afinish)
                $results += ("{0},{1}" -f $Bstart,$Bfinish)
            }
        }
        Else{
            #some overlap
            if($Bfinish -le $Afinish){
                #B is in A
                Write-verbose ("B is a subset of A")
                $results += ("{0},{1}" -f $Astart,$Afinish)
            }
            else{
                #There is overlap and B is not in A
                Write-verbose ("The sets overlap")
                $results += ("{0},{1}" -f $Astart,$Bfinish)
            }
        }
        $results
    }
}
